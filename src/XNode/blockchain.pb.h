// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XNode/blockchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XNode_2fblockchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XNode_2fblockchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XNode_2fblockchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XNode_2fblockchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XNode_2fblockchain_2eproto;
namespace xcoin {
namespace interchange {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Blockchain;
struct BlockchainDefaultTypeInternal;
extern BlockchainDefaultTypeInternal _Blockchain_default_instance_;
}  // namespace interchange
}  // namespace xcoin
PROTOBUF_NAMESPACE_OPEN
template<> ::xcoin::interchange::Block* Arena::CreateMaybeMessage<::xcoin::interchange::Block>(Arena*);
template<> ::xcoin::interchange::Blockchain* Arena::CreateMaybeMessage<::xcoin::interchange::Blockchain>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xcoin {
namespace interchange {

// ===================================================================

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xcoin.interchange.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit constexpr Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return new Block();
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xcoin.interchange.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kPreviousHashFieldNumber = 3,
    kDataFieldNumber = 5,
    kMinterAddressFieldNumber = 9,
    kIndexFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kDifficultyFieldNumber = 6,
    kNonceFieldNumber = 7,
    kMinterBalanceFieldNumber = 8,
  };
  // optional string hash = 2;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional string previousHash = 3;
  bool has_previoushash() const;
  private:
  bool _internal_has_previoushash() const;
  public:
  void clear_previoushash();
  const std::string& previoushash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previoushash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previoushash();
  PROTOBUF_MUST_USE_RESULT std::string* release_previoushash();
  void set_allocated_previoushash(std::string* previoushash);
  private:
  const std::string& _internal_previoushash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previoushash(const std::string& value);
  std::string* _internal_mutable_previoushash();
  public:

  // optional string data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string minterAddress = 9;
  bool has_minteraddress() const;
  private:
  bool _internal_has_minteraddress() const;
  public:
  void clear_minteraddress();
  const std::string& minteraddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_minteraddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_minteraddress();
  PROTOBUF_MUST_USE_RESULT std::string* release_minteraddress();
  void set_allocated_minteraddress(std::string* minteraddress);
  private:
  const std::string& _internal_minteraddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_minteraddress(const std::string& value);
  std::string* _internal_mutable_minteraddress();
  public:

  // optional int64 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 difficulty = 6;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::int64 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_difficulty() const;
  void _internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 nonce = 7;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::int64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 minterBalance = 8;
  bool has_minterbalance() const;
  private:
  bool _internal_has_minterbalance() const;
  public:
  void clear_minterbalance();
  ::PROTOBUF_NAMESPACE_ID::int64 minterbalance() const;
  void set_minterbalance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minterbalance() const;
  void _internal_set_minterbalance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:xcoin.interchange.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previoushash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minteraddress_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 difficulty_;
  ::PROTOBUF_NAMESPACE_ID::int64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::int64 minterbalance_;
  friend struct ::TableStruct_XNode_2fblockchain_2eproto;
};
// -------------------------------------------------------------------

class Blockchain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xcoin.interchange.Blockchain) */ {
 public:
  inline Blockchain() : Blockchain(nullptr) {}
  ~Blockchain() override;
  explicit constexpr Blockchain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blockchain(const Blockchain& from);
  Blockchain(Blockchain&& from) noexcept
    : Blockchain() {
    *this = ::std::move(from);
  }

  inline Blockchain& operator=(const Blockchain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blockchain& operator=(Blockchain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blockchain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blockchain* internal_default_instance() {
    return reinterpret_cast<const Blockchain*>(
               &_Blockchain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Blockchain& a, Blockchain& b) {
    a.Swap(&b);
  }
  inline void Swap(Blockchain* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blockchain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blockchain* New() const final {
    return new Blockchain();
  }

  Blockchain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blockchain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Blockchain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Blockchain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blockchain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xcoin.interchange.Blockchain";
  }
  protected:
  explicit Blockchain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .xcoin.interchange.Block blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::xcoin::interchange::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xcoin::interchange::Block >*
      mutable_blocks();
  private:
  const ::xcoin::interchange::Block& _internal_blocks(int index) const;
  ::xcoin::interchange::Block* _internal_add_blocks();
  public:
  const ::xcoin::interchange::Block& blocks(int index) const;
  ::xcoin::interchange::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xcoin::interchange::Block >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:xcoin.interchange.Blockchain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xcoin::interchange::Block > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XNode_2fblockchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// optional int64 index = 1;
inline bool Block::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Block::has_index() const {
  return _internal_has_index();
}
inline void Block::clear_index() {
  index_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::index() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.index)
  return _internal_index();
}
inline void Block::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void Block::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.index)
}

// optional string hash = 2;
inline bool Block::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Block::has_hash() const {
  return _internal_has_hash();
}
inline void Block::clear_hash() {
  hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.hash)
}
inline std::string* Block::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:xcoin.interchange.Block.hash)
  return _s;
}
inline const std::string& Block::_internal_hash() const {
  return hash_.Get();
}
inline void Block::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:xcoin.interchange.Block.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.Block.hash)
}

// optional string previousHash = 3;
inline bool Block::_internal_has_previoushash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Block::has_previoushash() const {
  return _internal_has_previoushash();
}
inline void Block::clear_previoushash() {
  previoushash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Block::previoushash() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.previousHash)
  return _internal_previoushash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_previoushash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 previoushash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.previousHash)
}
inline std::string* Block::mutable_previoushash() {
  std::string* _s = _internal_mutable_previoushash();
  // @@protoc_insertion_point(field_mutable:xcoin.interchange.Block.previousHash)
  return _s;
}
inline const std::string& Block::_internal_previoushash() const {
  return previoushash_.Get();
}
inline void Block::_internal_set_previoushash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  previoushash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_previoushash() {
  _has_bits_[0] |= 0x00000002u;
  return previoushash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_previoushash() {
  // @@protoc_insertion_point(field_release:xcoin.interchange.Block.previousHash)
  if (!_internal_has_previoushash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return previoushash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_previoushash(std::string* previoushash) {
  if (previoushash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  previoushash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previoushash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.Block.previousHash)
}

// optional int64 timestamp = 4;
inline bool Block::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Block::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Block::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::timestamp() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.timestamp)
  return _internal_timestamp();
}
inline void Block::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
}
inline void Block::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.timestamp)
}

// optional string data = 5;
inline bool Block::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Block::has_data() const {
  return _internal_has_data();
}
inline void Block::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Block::data() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.data)
}
inline std::string* Block::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xcoin.interchange.Block.data)
  return _s;
}
inline const std::string& Block::_internal_data() const {
  return data_.Get();
}
inline void Block::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_data() {
  // @@protoc_insertion_point(field_release:xcoin.interchange.Block.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.Block.data)
}

// optional int64 difficulty = 6;
inline bool Block::_internal_has_difficulty() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Block::has_difficulty() const {
  return _internal_has_difficulty();
}
inline void Block::clear_difficulty() {
  difficulty_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_difficulty() const {
  return difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::difficulty() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.difficulty)
  return _internal_difficulty();
}
inline void Block::_internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  difficulty_ = value;
}
inline void Block::set_difficulty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.difficulty)
}

// optional int64 nonce = 7;
inline bool Block::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Block::has_nonce() const {
  return _internal_has_nonce();
}
inline void Block::clear_nonce() {
  nonce_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::nonce() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.nonce)
  return _internal_nonce();
}
inline void Block::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  nonce_ = value;
}
inline void Block::set_nonce(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.nonce)
}

// optional int64 minterBalance = 8;
inline bool Block::_internal_has_minterbalance() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Block::has_minterbalance() const {
  return _internal_has_minterbalance();
}
inline void Block::clear_minterbalance() {
  minterbalance_ = int64_t{0};
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::_internal_minterbalance() const {
  return minterbalance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Block::minterbalance() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.minterBalance)
  return _internal_minterbalance();
}
inline void Block::_internal_set_minterbalance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  minterbalance_ = value;
}
inline void Block::set_minterbalance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minterbalance(value);
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.minterBalance)
}

// optional string minterAddress = 9;
inline bool Block::_internal_has_minteraddress() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Block::has_minteraddress() const {
  return _internal_has_minteraddress();
}
inline void Block::clear_minteraddress() {
  minteraddress_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Block::minteraddress() const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Block.minterAddress)
  return _internal_minteraddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_minteraddress(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 minteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xcoin.interchange.Block.minterAddress)
}
inline std::string* Block::mutable_minteraddress() {
  std::string* _s = _internal_mutable_minteraddress();
  // @@protoc_insertion_point(field_mutable:xcoin.interchange.Block.minterAddress)
  return _s;
}
inline const std::string& Block::_internal_minteraddress() const {
  return minteraddress_.Get();
}
inline void Block::_internal_set_minteraddress(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  minteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_minteraddress() {
  _has_bits_[0] |= 0x00000008u;
  return minteraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Block::release_minteraddress() {
  // @@protoc_insertion_point(field_release:xcoin.interchange.Block.minterAddress)
  if (!_internal_has_minteraddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return minteraddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Block::set_allocated_minteraddress(std::string* minteraddress) {
  if (minteraddress != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  minteraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minteraddress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.Block.minterAddress)
}

// -------------------------------------------------------------------

// Blockchain

// repeated .xcoin.interchange.Block blocks = 1;
inline int Blockchain::_internal_blocks_size() const {
  return blocks_.size();
}
inline int Blockchain::blocks_size() const {
  return _internal_blocks_size();
}
inline void Blockchain::clear_blocks() {
  blocks_.Clear();
}
inline ::xcoin::interchange::Block* Blockchain::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:xcoin.interchange.Blockchain.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xcoin::interchange::Block >*
Blockchain::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:xcoin.interchange.Blockchain.blocks)
  return &blocks_;
}
inline const ::xcoin::interchange::Block& Blockchain::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::xcoin::interchange::Block& Blockchain::blocks(int index) const {
  // @@protoc_insertion_point(field_get:xcoin.interchange.Blockchain.blocks)
  return _internal_blocks(index);
}
inline ::xcoin::interchange::Block* Blockchain::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::xcoin::interchange::Block* Blockchain::add_blocks() {
  ::xcoin::interchange::Block* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:xcoin.interchange.Blockchain.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xcoin::interchange::Block >&
Blockchain::blocks() const {
  // @@protoc_insertion_point(field_list:xcoin.interchange.Blockchain.blocks)
  return blocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interchange
}  // namespace xcoin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XNode_2fblockchain_2eproto
