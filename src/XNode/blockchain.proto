syntax = "proto3";
package xcoin.interchange;

service XNodeControl{ // Service responsible for node management and peer discovery
  rpc Ping(PingHandshake) returns (PingHandshake) {}
  rpc DNSSyncPeerList(DNSHandshake) returns (DNSHandshake) {}
  rpc NotifyPeerChange(DNSEntry) returns (DNSEntry) {}
}

service XNodeSync{ // Service responsible for blockchain and transactions synchronisation
  rpc PingPongSync(PingPong) returns (PingPong) {}
  rpc HeaderFirstSync(GetHeaders) returns (Headers) {}
  rpc GetBlockchainFromHeight(GetBlockchainFromHeightRequest) returns (Blockchain) {}
}

// Basic messages
message Block{
  optional int64 index = 1;
  optional string hash = 2;
  optional string previousHash = 3;
  optional string headerHash = 4;
  optional string previousHeaderHash = 5;
  optional int64 timestamp = 6;
  optional string data = 7;
  optional int64 difficulty= 8;
  optional int64 nonce = 9;
  optional int64 minterBalance = 10;
  optional string minterAddress = 11;
  optional string merkle_root_hash = 12;
}

message Blockchain{
  repeated Block blocks = 1;
}

// Interchange/Sync messages

message GetHeaders{
  uint32 version = 1;     // Protocol version for future backwards-compatibility
  uint32 hashCount = 2;   // Number of hashes provided not including the stop hash (1-200)
  string stopHash = 3;    // Header hash of last header hash being requested, set all 0 for non-stop
  repeated string blockHeaderHashes = 4; // One or more header hashes in reverse order of block height.
}

message Header{
  string blockHeaderHash = 1;
  string merkleRootHash = 2;  // Encompasses all the included transaction hashes
  uint32 time = 3;
}

message Headers{
  uint32 count = 1;
  repeated Header headers = 2;
}

message XNodeMessage{
  string startString = 1; // First 10 characters of payload
  string command = 2;
  uint32 size = 3;
  string checksum = 4;
  oneof contents{
    GetHeaders getHeadersMessage = 5;
    Headers headersMessage = 6;
    DNSHandshake dnsHandshakeMessage = 7;
  }
}

message DNSEntry{
  string ipport = 1;
  string publicKey = 2;
}

message PingHandshake{
  string data = 1;
}

message DNSHandshake{
  repeated DNSEntry entries = 2;
}

message PingPong{
  uint32 height = 1;
  string lastHash = 2;
}

message GetBlockchainFromHeightRequest{
  uint32 startheight = 1;
  string stopHash = 2;
}