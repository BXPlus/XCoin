// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#include "blockchain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xcoin {
namespace interchange {
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previoushash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headerhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previousheaderhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minteraddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , merkle_root_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(int64_t{0})
  , timestamp_(int64_t{0})
  , difficulty_(int64_t{0})
  , nonce_(int64_t{0})
  , minterbalance_(int64_t{0}){}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
constexpr Blockchain::Blockchain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocks_(){}
struct BlockchainDefaultTypeInternal {
  constexpr BlockchainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockchainDefaultTypeInternal() {}
  union {
    Blockchain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockchainDefaultTypeInternal _Blockchain_default_instance_;
constexpr GetHeaders::GetHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockheaderhashes_()
  , stophash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u)
  , hashcount_(0u){}
struct GetHeadersDefaultTypeInternal {
  constexpr GetHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetHeadersDefaultTypeInternal() {}
  union {
    GetHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetHeadersDefaultTypeInternal _GetHeaders_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockheaderhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , merkleroothash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(0u){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Headers::Headers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , count_(0u){}
struct HeadersDefaultTypeInternal {
  constexpr HeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadersDefaultTypeInternal() {}
  union {
    Headers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadersDefaultTypeInternal _Headers_default_instance_;
constexpr XNodeMessage::XNodeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , checksum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(0u)
  , _oneof_case_{}{}
struct XNodeMessageDefaultTypeInternal {
  constexpr XNodeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XNodeMessageDefaultTypeInternal() {}
  union {
    XNodeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XNodeMessageDefaultTypeInternal _XNodeMessage_default_instance_;
constexpr DNSEntry::DNSEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DNSEntryDefaultTypeInternal {
  constexpr DNSEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DNSEntryDefaultTypeInternal() {}
  union {
    DNSEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DNSEntryDefaultTypeInternal _DNSEntry_default_instance_;
constexpr PingHandshake::PingHandshake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PingHandshakeDefaultTypeInternal {
  constexpr PingHandshakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingHandshakeDefaultTypeInternal() {}
  union {
    PingHandshake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingHandshakeDefaultTypeInternal _PingHandshake_default_instance_;
constexpr DNSHandshake::DNSHandshake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct DNSHandshakeDefaultTypeInternal {
  constexpr DNSHandshakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DNSHandshakeDefaultTypeInternal() {}
  union {
    DNSHandshake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DNSHandshakeDefaultTypeInternal _DNSHandshake_default_instance_;
constexpr PingPong::PingPong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lasthash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(0u){}
struct PingPongDefaultTypeInternal {
  constexpr PingPongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingPongDefaultTypeInternal() {}
  union {
    PingPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingPongDefaultTypeInternal _PingPong_default_instance_;
constexpr GetBlockchainFromHeightRequest::GetBlockchainFromHeightRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stophash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , startheight_(0u){}
struct GetBlockchainFromHeightRequestDefaultTypeInternal {
  constexpr GetBlockchainFromHeightRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockchainFromHeightRequestDefaultTypeInternal() {}
  union {
    GetBlockchainFromHeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockchainFromHeightRequestDefaultTypeInternal _GetBlockchainFromHeightRequest_default_instance_;
constexpr PeerUpdateHandshake::PeerUpdateHandshake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publicaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updatetype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localpeershash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , online_(false){}
struct PeerUpdateHandshakeDefaultTypeInternal {
  constexpr PeerUpdateHandshakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerUpdateHandshakeDefaultTypeInternal() {}
  union {
    PeerUpdateHandshake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerUpdateHandshakeDefaultTypeInternal _PeerUpdateHandshake_default_instance_;
constexpr NewBlockHandshake::NewBlockHandshake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct NewBlockHandshakeDefaultTypeInternal {
  constexpr NewBlockHandshakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewBlockHandshakeDefaultTypeInternal() {}
  union {
    NewBlockHandshake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewBlockHandshakeDefaultTypeInternal _NewBlockHandshake_default_instance_;
constexpr TxInSignature::TxInSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s1_(uint64_t{0u})
  , s2_(0u){}
struct TxInSignatureDefaultTypeInternal {
  constexpr TxInSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxInSignatureDefaultTypeInternal() {}
  union {
    TxInSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxInSignatureDefaultTypeInternal _TxInSignature_default_instance_;
constexpr TxIn::TxIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txoutid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(nullptr)
  , txoutindex_(0u){}
struct TxInDefaultTypeInternal {
  constexpr TxInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxInDefaultTypeInternal() {}
  union {
    TxIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxInDefaultTypeInternal _TxIn_default_instance_;
constexpr TxOut::TxOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(0u){}
struct TxOutDefaultTypeInternal {
  constexpr TxOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxOutDefaultTypeInternal() {}
  union {
    TxOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxOutDefaultTypeInternal _TxOut_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txins_()
  , txouts_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace interchange
}  // namespace xcoin
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_blockchain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_blockchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, index_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, hash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, previoushash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, headerhash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, previousheaderhash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, data_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, difficulty_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, nonce_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, minterbalance_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, minteraddress_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Block, merkle_root_hash_),
  7,
  0,
  1,
  2,
  3,
  8,
  4,
  9,
  10,
  11,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Blockchain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Blockchain, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetHeaders, version_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetHeaders, hashcount_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetHeaders, stophash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetHeaders, blockheaderhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Header, blockheaderhash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Header, merkleroothash_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Header, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Headers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Headers, count_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Headers, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, startstring_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, command_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, size_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, checksum_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::XNodeMessage, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::DNSEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::DNSEntry, ipport_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::DNSEntry, publickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PingHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PingHandshake, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::DNSHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::DNSHandshake, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PingPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PingPong, height_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PingPong, lasthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetBlockchainFromHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetBlockchainFromHeightRequest, startheight_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::GetBlockchainFromHeightRequest, stophash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, peer_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, publicaddress_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, online_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, updatetype_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::PeerUpdateHandshake, localpeershash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::NewBlockHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::NewBlockHandshake, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxInSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxInSignature, s1_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxInSignature, s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxIn, txoutid_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxIn, txoutindex_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxIn, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxOut, address_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::TxOut, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Transaction, id_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Transaction, txins_),
  PROTOBUF_FIELD_OFFSET(::xcoin::interchange::Transaction, txouts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::xcoin::interchange::Block)},
  { 30, -1, -1, sizeof(::xcoin::interchange::Blockchain)},
  { 37, -1, -1, sizeof(::xcoin::interchange::GetHeaders)},
  { 47, -1, -1, sizeof(::xcoin::interchange::Header)},
  { 56, -1, -1, sizeof(::xcoin::interchange::Headers)},
  { 64, -1, -1, sizeof(::xcoin::interchange::XNodeMessage)},
  { 78, -1, -1, sizeof(::xcoin::interchange::DNSEntry)},
  { 86, -1, -1, sizeof(::xcoin::interchange::PingHandshake)},
  { 93, -1, -1, sizeof(::xcoin::interchange::DNSHandshake)},
  { 100, -1, -1, sizeof(::xcoin::interchange::PingPong)},
  { 108, -1, -1, sizeof(::xcoin::interchange::GetBlockchainFromHeightRequest)},
  { 116, -1, -1, sizeof(::xcoin::interchange::PeerUpdateHandshake)},
  { 127, -1, -1, sizeof(::xcoin::interchange::NewBlockHandshake)},
  { 134, -1, -1, sizeof(::xcoin::interchange::TxInSignature)},
  { 142, -1, -1, sizeof(::xcoin::interchange::TxIn)},
  { 151, -1, -1, sizeof(::xcoin::interchange::TxOut)},
  { 159, -1, -1, sizeof(::xcoin::interchange::Transaction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_Blockchain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_GetHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_Headers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_XNodeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_DNSEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_PingHandshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_DNSHandshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_PingPong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_GetBlockchainFromHeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_PeerUpdateHandshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_NewBlockHandshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_TxInSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_TxIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_TxOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xcoin::interchange::_Transaction_default_instance_),
};

const char descriptor_table_protodef_blockchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020blockchain.proto\022\021xcoin.interchange\"\345\003"
  "\n\005Block\022\022\n\005index\030\001 \001(\003H\000\210\001\001\022\021\n\004hash\030\002 \001("
  "\tH\001\210\001\001\022\031\n\014previousHash\030\003 \001(\tH\002\210\001\001\022\027\n\nhea"
  "derHash\030\004 \001(\tH\003\210\001\001\022\037\n\022previousHeaderHash"
  "\030\005 \001(\tH\004\210\001\001\022\026\n\ttimestamp\030\006 \001(\003H\005\210\001\001\022\021\n\004d"
  "ata\030\007 \001(\014H\006\210\001\001\022\027\n\ndifficulty\030\010 \001(\003H\007\210\001\001\022"
  "\022\n\005nonce\030\t \001(\003H\010\210\001\001\022\032\n\rminterBalance\030\n \001"
  "(\003H\t\210\001\001\022\032\n\rminterAddress\030\013 \001(\tH\n\210\001\001\022\035\n\020m"
  "erkle_root_hash\030\014 \001(\tH\013\210\001\001B\010\n\006_indexB\007\n\005"
  "_hashB\017\n\r_previousHashB\r\n\013_headerHashB\025\n"
  "\023_previousHeaderHashB\014\n\n_timestampB\007\n\005_d"
  "ataB\r\n\013_difficultyB\010\n\006_nonceB\020\n\016_minterB"
  "alanceB\020\n\016_minterAddressB\023\n\021_merkle_root"
  "_hash\"6\n\nBlockchain\022(\n\006blocks\030\001 \003(\0132\030.xc"
  "oin.interchange.Block\"]\n\nGetHeaders\022\017\n\007v"
  "ersion\030\001 \001(\r\022\021\n\thashCount\030\002 \001(\r\022\020\n\010stopH"
  "ash\030\003 \001(\t\022\031\n\021blockHeaderHashes\030\004 \003(\t\"G\n\006"
  "Header\022\027\n\017blockHeaderHash\030\001 \001(\t\022\026\n\016merkl"
  "eRootHash\030\002 \001(\t\022\014\n\004time\030\003 \001(\r\"D\n\007Headers"
  "\022\r\n\005count\030\001 \001(\r\022*\n\007headers\030\002 \003(\0132\031.xcoin"
  ".interchange.Header\"\222\002\n\014XNodeMessage\022\023\n\013"
  "startString\030\001 \001(\t\022\017\n\007command\030\002 \001(\t\022\014\n\004si"
  "ze\030\003 \001(\r\022\020\n\010checksum\030\004 \001(\t\022:\n\021getHeaders"
  "Message\030\005 \001(\0132\035.xcoin.interchange.GetHea"
  "dersH\000\0224\n\016headersMessage\030\006 \001(\0132\032.xcoin.i"
  "nterchange.HeadersH\000\022>\n\023dnsHandshakeMess"
  "age\030\007 \001(\0132\037.xcoin.interchange.DNSHandsha"
  "keH\000B\n\n\010contents\"-\n\010DNSEntry\022\016\n\006ipport\030\001"
  " \001(\t\022\021\n\tpublicKey\030\002 \001(\t\"\035\n\rPingHandshake"
  "\022\014\n\004data\030\001 \001(\t\"<\n\014DNSHandshake\022,\n\007entrie"
  "s\030\002 \003(\0132\033.xcoin.interchange.DNSEntry\",\n\010"
  "PingPong\022\016\n\006height\030\001 \001(\r\022\020\n\010lastHash\030\002 \001"
  "(\t\"G\n\036GetBlockchainFromHeightRequest\022\023\n\013"
  "startheight\030\001 \001(\r\022\020\n\010stopHash\030\002 \001(\t\"v\n\023P"
  "eerUpdateHandshake\022\014\n\004peer\030\001 \001(\t\022\025\n\rpubl"
  "icAddress\030\002 \001(\t\022\016\n\006online\030\003 \001(\010\022\022\n\nupdat"
  "eType\030\004 \001(\t\022\026\n\016localPeersHash\030\005 \001(\t\"<\n\021N"
  "ewBlockHandshake\022\'\n\005block\030\001 \001(\0132\030.xcoin."
  "interchange.Block\"\'\n\rTxInSignature\022\n\n\002s1"
  "\030\001 \001(\004\022\n\n\002s2\030\002 \001(\r\"`\n\004TxIn\022\017\n\007txOutId\030\001 "
  "\001(\t\022\022\n\ntxOutIndex\030\002 \001(\r\0223\n\tsignature\030\003 \001"
  "(\0132 .xcoin.interchange.TxInSignature\"(\n\005"
  "TxOut\022\017\n\007address\030\001 \001(\t\022\016\n\006amount\030\002 \001(\r\"k"
  "\n\013Transaction\022\n\n\002id\030\001 \001(\t\022&\n\005txIns\030\002 \003(\013"
  "2\027.xcoin.interchange.TxIn\022(\n\006txOuts\030\003 \003("
  "\0132\030.xcoin.interchange.TxOut2\223\002\n\014XNodeCon"
  "trol\022L\n\004Ping\022 .xcoin.interchange.PingHan"
  "dshake\032 .xcoin.interchange.PingHandshake"
  "\"\000\022U\n\017DNSSyncPeerList\022\037.xcoin.interchang"
  "e.DNSHandshake\032\037.xcoin.interchange.DNSHa"
  "ndshake\"\000\022^\n\020NotifyPeerChange\022&.xcoin.in"
  "terchange.PeerUpdateHandshake\032 .xcoin.in"
  "terchange.PingHandshake\"\0002\365\002\n\tXNodeSync\022"
  "J\n\014PingPongSync\022\033.xcoin.interchange.Ping"
  "Pong\032\033.xcoin.interchange.PingPong\"\000\022N\n\017H"
  "eaderFirstSync\022\035.xcoin.interchange.GetHe"
  "aders\032\032.xcoin.interchange.Headers\"\000\022m\n\027G"
  "etBlockchainFromHeight\0221.xcoin.interchan"
  "ge.GetBlockchainFromHeightRequest\032\035.xcoi"
  "n.interchange.Blockchain\"\000\022]\n\021NotifyBloc"
  "kChange\022$.xcoin.interchange.NewBlockHand"
  "shake\032 .xcoin.interchange.PingHandshake\""
  "\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto = {
  false, false, 2489, descriptor_table_protodef_blockchain_2eproto, "blockchain.proto", 
  &descriptor_table_blockchain_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_blockchain_2eproto::offsets,
  file_level_metadata_blockchain_2eproto, file_level_enum_descriptors_blockchain_2eproto, file_level_service_descriptors_blockchain_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blockchain_2eproto_getter() {
  return &descriptor_table_blockchain_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blockchain_2eproto(&descriptor_table_blockchain_2eproto);
namespace xcoin {
namespace interchange {

// ===================================================================

class Block::_Internal {
 public:
  using HasBits = decltype(std::declval<Block>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previoushash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_headerhash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_previousheaderhash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_minterbalance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_minteraddress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_merkle_root_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  previoushash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previoushash()) {
    previoushash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previoushash(), 
      GetArenaForAllocation());
  }
  headerhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headerhash()) {
    headerhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headerhash(), 
      GetArenaForAllocation());
  }
  previousheaderhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_previousheaderhash()) {
    previousheaderhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previousheaderhash(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  minteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_minteraddress()) {
    minteraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minteraddress(), 
      GetArenaForAllocation());
  }
  merkle_root_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merkle_root_hash()) {
    merkle_root_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merkle_root_hash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&minterbalance_) -
    reinterpret_cast<char*>(&index_)) + sizeof(minterbalance_));
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.Block)
}

void Block::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previoushash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headerhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previousheaderhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
merkle_root_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minterbalance_) -
    reinterpret_cast<char*>(&index_)) + sizeof(minterbalance_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previoushash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headerhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previousheaderhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minteraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkle_root_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      previoushash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      headerhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      previousheaderhash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      minteraddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      merkle_root_hash_.ClearNonDefaultToEmpty();
    }
  }
  index_ = int64_t{0};
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minterbalance_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(minterbalance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previousHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_previoushash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.previousHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string headerHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_headerhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.headerHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previousHeaderHash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_previousheaderhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.previousHeaderHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 difficulty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_difficulty(&has_bits);
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 minterBalance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_minterbalance(&has_bits);
          minterbalance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string minterAddress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_minteraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.minterAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string merkle_root_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_merkle_root_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Block.merkle_root_hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 index = 1;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // optional string hash = 2;
  if (_internal_has_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // optional string previousHash = 3;
  if (_internal_has_previoushash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previoushash().data(), static_cast<int>(this->_internal_previoushash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.previousHash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_previoushash(), target);
  }

  // optional string headerHash = 4;
  if (_internal_has_headerhash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headerhash().data(), static_cast<int>(this->_internal_headerhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.headerHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_headerhash(), target);
  }

  // optional string previousHeaderHash = 5;
  if (_internal_has_previousheaderhash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previousheaderhash().data(), static_cast<int>(this->_internal_previousheaderhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.previousHeaderHash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_previousheaderhash(), target);
  }

  // optional int64 timestamp = 6;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // optional bytes data = 7;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  // optional int64 difficulty = 8;
  if (_internal_has_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_difficulty(), target);
  }

  // optional int64 nonce = 9;
  if (_internal_has_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_nonce(), target);
  }

  // optional int64 minterBalance = 10;
  if (_internal_has_minterbalance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_minterbalance(), target);
  }

  // optional string minterAddress = 11;
  if (_internal_has_minteraddress()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minteraddress().data(), static_cast<int>(this->_internal_minteraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.minterAddress");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_minteraddress(), target);
  }

  // optional string merkle_root_hash = 12;
  if (_internal_has_merkle_root_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merkle_root_hash().data(), static_cast<int>(this->_internal_merkle_root_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Block.merkle_root_hash");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_merkle_root_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
    }

    // optional string previousHash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previoushash());
    }

    // optional string headerHash = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headerhash());
    }

    // optional string previousHeaderHash = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previousheaderhash());
    }

    // optional bytes data = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string minterAddress = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_minteraddress());
    }

    // optional string merkle_root_hash = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_merkle_root_hash());
    }

    // optional int64 index = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_index());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 timestamp = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional int64 difficulty = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_difficulty());
    }

    // optional int64 nonce = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nonce());
    }

    // optional int64 minterBalance = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_minterbalance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.Block)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_previoushash(from._internal_previoushash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_headerhash(from._internal_headerhash());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_previousheaderhash(from._internal_previousheaderhash());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_minteraddress(from._internal_minteraddress());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_merkle_root_hash(from._internal_merkle_root_hash());
    }
    if (cached_has_bits & 0x00000080u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000400u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000800u) {
      minterbalance_ = from.minterbalance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previoushash_, lhs_arena,
      &other->previoushash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headerhash_, lhs_arena,
      &other->headerhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previousheaderhash_, lhs_arena,
      &other->previousheaderhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minteraddress_, lhs_arena,
      &other->minteraddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merkle_root_hash_, lhs_arena,
      &other->merkle_root_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, minterbalance_)
      + sizeof(Block::minterbalance_)
      - PROTOBUF_FIELD_OFFSET(Block, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[0]);
}

// ===================================================================

class Blockchain::_Internal {
 public:
};

Blockchain::Blockchain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.Blockchain)
}
Blockchain::Blockchain(const Blockchain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.Blockchain)
}

void Blockchain::SharedCtor() {
}

Blockchain::~Blockchain() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.Blockchain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Blockchain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Blockchain::ArenaDtor(void* object) {
  Blockchain* _this = reinterpret_cast< Blockchain* >(object);
  (void)_this;
}
void Blockchain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Blockchain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Blockchain::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.Blockchain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Blockchain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xcoin.interchange.Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Blockchain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.Blockchain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xcoin.interchange.Block blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.Blockchain)
  return target;
}

size_t Blockchain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.Blockchain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xcoin.interchange.Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Blockchain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Blockchain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Blockchain::GetClassData() const { return &_class_data_; }

void Blockchain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Blockchain *>(to)->MergeFrom(
      static_cast<const Blockchain &>(from));
}


void Blockchain::MergeFrom(const Blockchain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.Blockchain)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Blockchain::CopyFrom(const Blockchain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.Blockchain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blockchain::IsInitialized() const {
  return true;
}

void Blockchain::InternalSwap(Blockchain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Blockchain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[1]);
}

// ===================================================================

class GetHeaders::_Internal {
 public:
};

GetHeaders::GetHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blockheaderhashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.GetHeaders)
}
GetHeaders::GetHeaders(const GetHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blockheaderhashes_(from.blockheaderhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stophash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stophash().empty()) {
    stophash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stophash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&hashcount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(hashcount_));
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.GetHeaders)
}

void GetHeaders::SharedCtor() {
stophash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hashcount_) -
    reinterpret_cast<char*>(&version_)) + sizeof(hashcount_));
}

GetHeaders::~GetHeaders() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.GetHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stophash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetHeaders::ArenaDtor(void* object) {
  GetHeaders* _this = reinterpret_cast< GetHeaders* >(object);
  (void)_this;
}
void GetHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.GetHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockheaderhashes_.Clear();
  stophash_.ClearToEmpty();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hashcount_) -
      reinterpret_cast<char*>(&version_)) + sizeof(hashcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hashCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hashcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stopHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stophash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.GetHeaders.stopHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockHeaderHashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockheaderhashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.GetHeaders.blockHeaderHashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHeaders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.GetHeaders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint32 hashCount = 2;
  if (this->_internal_hashcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hashcount(), target);
  }

  // string stopHash = 3;
  if (!this->_internal_stophash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stophash().data(), static_cast<int>(this->_internal_stophash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.GetHeaders.stopHash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stophash(), target);
  }

  // repeated string blockHeaderHashes = 4;
  for (int i = 0, n = this->_internal_blockheaderhashes_size(); i < n; i++) {
    const auto& s = this->_internal_blockheaderhashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.GetHeaders.blockHeaderHashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.GetHeaders)
  return target;
}

size_t GetHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.GetHeaders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blockHeaderHashes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blockheaderhashes_.size());
  for (int i = 0, n = blockheaderhashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blockheaderhashes_.Get(i));
  }

  // string stopHash = 3;
  if (!this->_internal_stophash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stophash());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 hashCount = 2;
  if (this->_internal_hashcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hashcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHeaders::GetClassData() const { return &_class_data_; }

void GetHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetHeaders *>(to)->MergeFrom(
      static_cast<const GetHeaders &>(from));
}


void GetHeaders::MergeFrom(const GetHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.GetHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockheaderhashes_.MergeFrom(from.blockheaderhashes_);
  if (!from._internal_stophash().empty()) {
    _internal_set_stophash(from._internal_stophash());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_hashcount() != 0) {
    _internal_set_hashcount(from._internal_hashcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHeaders::CopyFrom(const GetHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.GetHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHeaders::IsInitialized() const {
  return true;
}

void GetHeaders::InternalSwap(GetHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blockheaderhashes_.InternalSwap(&other->blockheaderhashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stophash_, lhs_arena,
      &other->stophash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHeaders, hashcount_)
      + sizeof(GetHeaders::hashcount_)
      - PROTOBUF_FIELD_OFFSET(GetHeaders, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[2]);
}

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blockheaderhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blockheaderhash().empty()) {
    blockheaderhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blockheaderhash(), 
      GetArenaForAllocation());
  }
  merkleroothash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_merkleroothash().empty()) {
    merkleroothash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merkleroothash(), 
      GetArenaForAllocation());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.Header)
}

void Header::SharedCtor() {
blockheaderhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
merkleroothash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_ = 0u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blockheaderhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merkleroothash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockheaderhash_.ClearToEmpty();
  merkleroothash_.ClearToEmpty();
  time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string blockHeaderHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blockheaderhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Header.blockHeaderHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string merkleRootHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_merkleroothash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Header.merkleRootHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string blockHeaderHash = 1;
  if (!this->_internal_blockheaderhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockheaderhash().data(), static_cast<int>(this->_internal_blockheaderhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Header.blockHeaderHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blockheaderhash(), target);
  }

  // string merkleRootHash = 2;
  if (!this->_internal_merkleroothash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merkleroothash().data(), static_cast<int>(this->_internal_merkleroothash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Header.merkleRootHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merkleroothash(), target);
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blockHeaderHash = 1;
  if (!this->_internal_blockheaderhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockheaderhash());
  }

  // string merkleRootHash = 2;
  if (!this->_internal_merkleroothash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merkleroothash());
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blockheaderhash().empty()) {
    _internal_set_blockheaderhash(from._internal_blockheaderhash());
  }
  if (!from._internal_merkleroothash().empty()) {
    _internal_set_merkleroothash(from._internal_merkleroothash());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blockheaderhash_, lhs_arena,
      &other->blockheaderhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merkleroothash_, lhs_arena,
      &other->merkleroothash_, rhs_arena
  );
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[3]);
}

// ===================================================================

class Headers::_Internal {
 public:
};

Headers::Headers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.Headers)
}
Headers::Headers(const Headers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.Headers)
}

void Headers::SharedCtor() {
count_ = 0u;
}

Headers::~Headers() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.Headers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Headers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Headers::ArenaDtor(void* object) {
  Headers* _this = reinterpret_cast< Headers* >(object);
  (void)_this;
}
void Headers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Headers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Headers::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.Headers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Headers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xcoin.interchange.Header headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.Headers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .xcoin.interchange.Header headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.Headers)
  return target;
}

size_t Headers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.Headers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xcoin.interchange.Header headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Headers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Headers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Headers::GetClassData() const { return &_class_data_; }

void Headers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Headers *>(to)->MergeFrom(
      static_cast<const Headers &>(from));
}


void Headers::MergeFrom(const Headers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.Headers)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Headers::CopyFrom(const Headers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.Headers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headers::IsInitialized() const {
  return true;
}

void Headers::InternalSwap(Headers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[4]);
}

// ===================================================================

class XNodeMessage::_Internal {
 public:
  static const ::xcoin::interchange::GetHeaders& getheadersmessage(const XNodeMessage* msg);
  static const ::xcoin::interchange::Headers& headersmessage(const XNodeMessage* msg);
  static const ::xcoin::interchange::DNSHandshake& dnshandshakemessage(const XNodeMessage* msg);
};

const ::xcoin::interchange::GetHeaders&
XNodeMessage::_Internal::getheadersmessage(const XNodeMessage* msg) {
  return *msg->contents_.getheadersmessage_;
}
const ::xcoin::interchange::Headers&
XNodeMessage::_Internal::headersmessage(const XNodeMessage* msg) {
  return *msg->contents_.headersmessage_;
}
const ::xcoin::interchange::DNSHandshake&
XNodeMessage::_Internal::dnshandshakemessage(const XNodeMessage* msg) {
  return *msg->contents_.dnshandshakemessage_;
}
void XNodeMessage::set_allocated_getheadersmessage(::xcoin::interchange::GetHeaders* getheadersmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_contents();
  if (getheadersmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xcoin::interchange::GetHeaders>::GetOwningArena(getheadersmessage);
    if (message_arena != submessage_arena) {
      getheadersmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getheadersmessage, submessage_arena);
    }
    set_has_getheadersmessage();
    contents_.getheadersmessage_ = getheadersmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.XNodeMessage.getHeadersMessage)
}
void XNodeMessage::set_allocated_headersmessage(::xcoin::interchange::Headers* headersmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_contents();
  if (headersmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xcoin::interchange::Headers>::GetOwningArena(headersmessage);
    if (message_arena != submessage_arena) {
      headersmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headersmessage, submessage_arena);
    }
    set_has_headersmessage();
    contents_.headersmessage_ = headersmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.XNodeMessage.headersMessage)
}
void XNodeMessage::set_allocated_dnshandshakemessage(::xcoin::interchange::DNSHandshake* dnshandshakemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_contents();
  if (dnshandshakemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xcoin::interchange::DNSHandshake>::GetOwningArena(dnshandshakemessage);
    if (message_arena != submessage_arena) {
      dnshandshakemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dnshandshakemessage, submessage_arena);
    }
    set_has_dnshandshakemessage();
    contents_.dnshandshakemessage_ = dnshandshakemessage;
  }
  // @@protoc_insertion_point(field_set_allocated:xcoin.interchange.XNodeMessage.dnsHandshakeMessage)
}
XNodeMessage::XNodeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.XNodeMessage)
}
XNodeMessage::XNodeMessage(const XNodeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  startstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_startstring().empty()) {
    startstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_startstring(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checksum().empty()) {
    checksum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_checksum(), 
      GetArenaForAllocation());
  }
  size_ = from.size_;
  clear_has_contents();
  switch (from.contents_case()) {
    case kGetHeadersMessage: {
      _internal_mutable_getheadersmessage()->::xcoin::interchange::GetHeaders::MergeFrom(from._internal_getheadersmessage());
      break;
    }
    case kHeadersMessage: {
      _internal_mutable_headersmessage()->::xcoin::interchange::Headers::MergeFrom(from._internal_headersmessage());
      break;
    }
    case kDnsHandshakeMessage: {
      _internal_mutable_dnshandshakemessage()->::xcoin::interchange::DNSHandshake::MergeFrom(from._internal_dnshandshakemessage());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.XNodeMessage)
}

void XNodeMessage::SharedCtor() {
startstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_ = 0u;
clear_has_contents();
}

XNodeMessage::~XNodeMessage() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.XNodeMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XNodeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  startstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_contents()) {
    clear_contents();
  }
}

void XNodeMessage::ArenaDtor(void* object) {
  XNodeMessage* _this = reinterpret_cast< XNodeMessage* >(object);
  (void)_this;
}
void XNodeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XNodeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XNodeMessage::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:xcoin.interchange.XNodeMessage)
  switch (contents_case()) {
    case kGetHeadersMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete contents_.getheadersmessage_;
      }
      break;
    }
    case kHeadersMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete contents_.headersmessage_;
      }
      break;
    }
    case kDnsHandshakeMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete contents_.dnshandshakemessage_;
      }
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void XNodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.XNodeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startstring_.ClearToEmpty();
  command_.ClearToEmpty();
  checksum_.ClearToEmpty();
  size_ = 0u;
  clear_contents();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XNodeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string startString = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_startstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.XNodeMessage.startString"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.XNodeMessage.command"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string checksum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.XNodeMessage.checksum"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xcoin.interchange.GetHeaders getHeadersMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getheadersmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xcoin.interchange.Headers headersMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_headersmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xcoin.interchange.DNSHandshake dnsHandshakeMessage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dnshandshakemessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XNodeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.XNodeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string startString = 1;
  if (!this->_internal_startstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startstring().data(), static_cast<int>(this->_internal_startstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.XNodeMessage.startString");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_startstring(), target);
  }

  // string command = 2;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.XNodeMessage.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  // string checksum = 4;
  if (!this->_internal_checksum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.XNodeMessage.checksum");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_checksum(), target);
  }

  // .xcoin.interchange.GetHeaders getHeadersMessage = 5;
  if (_internal_has_getheadersmessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::getheadersmessage(this), target, stream);
  }

  // .xcoin.interchange.Headers headersMessage = 6;
  if (_internal_has_headersmessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::headersmessage(this), target, stream);
  }

  // .xcoin.interchange.DNSHandshake dnsHandshakeMessage = 7;
  if (_internal_has_dnshandshakemessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dnshandshakemessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.XNodeMessage)
  return target;
}

size_t XNodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.XNodeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string startString = 1;
  if (!this->_internal_startstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_startstring());
  }

  // string command = 2;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string checksum = 4;
  if (!this->_internal_checksum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum());
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  switch (contents_case()) {
    // .xcoin.interchange.GetHeaders getHeadersMessage = 5;
    case kGetHeadersMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.getheadersmessage_);
      break;
    }
    // .xcoin.interchange.Headers headersMessage = 6;
    case kHeadersMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.headersmessage_);
      break;
    }
    // .xcoin.interchange.DNSHandshake dnsHandshakeMessage = 7;
    case kDnsHandshakeMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.dnshandshakemessage_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XNodeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XNodeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XNodeMessage::GetClassData() const { return &_class_data_; }

void XNodeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XNodeMessage *>(to)->MergeFrom(
      static_cast<const XNodeMessage &>(from));
}


void XNodeMessage::MergeFrom(const XNodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.XNodeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_startstring().empty()) {
    _internal_set_startstring(from._internal_startstring());
  }
  if (!from._internal_command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (!from._internal_checksum().empty()) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  switch (from.contents_case()) {
    case kGetHeadersMessage: {
      _internal_mutable_getheadersmessage()->::xcoin::interchange::GetHeaders::MergeFrom(from._internal_getheadersmessage());
      break;
    }
    case kHeadersMessage: {
      _internal_mutable_headersmessage()->::xcoin::interchange::Headers::MergeFrom(from._internal_headersmessage());
      break;
    }
    case kDnsHandshakeMessage: {
      _internal_mutable_dnshandshakemessage()->::xcoin::interchange::DNSHandshake::MergeFrom(from._internal_dnshandshakemessage());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XNodeMessage::CopyFrom(const XNodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.XNodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XNodeMessage::IsInitialized() const {
  return true;
}

void XNodeMessage::InternalSwap(XNodeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &startstring_, lhs_arena,
      &other->startstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &checksum_, lhs_arena,
      &other->checksum_, rhs_arena
  );
  swap(size_, other->size_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata XNodeMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[5]);
}

// ===================================================================

class DNSEntry::_Internal {
 public:
};

DNSEntry::DNSEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.DNSEntry)
}
DNSEntry::DNSEntry(const DNSEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipport().empty()) {
    ipport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipport(), 
      GetArenaForAllocation());
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publickey(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.DNSEntry)
}

void DNSEntry::SharedCtor() {
ipport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DNSEntry::~DNSEntry() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.DNSEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DNSEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DNSEntry::ArenaDtor(void* object) {
  DNSEntry* _this = reinterpret_cast< DNSEntry* >(object);
  (void)_this;
}
void DNSEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DNSEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.DNSEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipport_.ClearToEmpty();
  publickey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ipport = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.DNSEntry.ipport"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.DNSEntry.publicKey"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.DNSEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipport = 1;
  if (!this->_internal_ipport().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipport().data(), static_cast<int>(this->_internal_ipport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.DNSEntry.ipport");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipport(), target);
  }

  // string publicKey = 2;
  if (!this->_internal_publickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.DNSEntry.publicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.DNSEntry)
  return target;
}

size_t DNSEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.DNSEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipport = 1;
  if (!this->_internal_ipport().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipport());
  }

  // string publicKey = 2;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DNSEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSEntry::GetClassData() const { return &_class_data_; }

void DNSEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DNSEntry *>(to)->MergeFrom(
      static_cast<const DNSEntry &>(from));
}


void DNSEntry::MergeFrom(const DNSEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.DNSEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipport().empty()) {
    _internal_set_ipport(from._internal_ipport());
  }
  if (!from._internal_publickey().empty()) {
    _internal_set_publickey(from._internal_publickey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSEntry::CopyFrom(const DNSEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.DNSEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSEntry::IsInitialized() const {
  return true;
}

void DNSEntry::InternalSwap(DNSEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipport_, lhs_arena,
      &other->ipport_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &publickey_, lhs_arena,
      &other->publickey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[6]);
}

// ===================================================================

class PingHandshake::_Internal {
 public:
};

PingHandshake::PingHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.PingHandshake)
}
PingHandshake::PingHandshake(const PingHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.PingHandshake)
}

void PingHandshake::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PingHandshake::~PingHandshake() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.PingHandshake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingHandshake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingHandshake::ArenaDtor(void* object) {
  PingHandshake* _this = reinterpret_cast< PingHandshake* >(object);
  (void)_this;
}
void PingHandshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.PingHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingHandshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PingHandshake.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingHandshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.PingHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PingHandshake.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.PingHandshake)
  return target;
}

size_t PingHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.PingHandshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingHandshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingHandshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingHandshake::GetClassData() const { return &_class_data_; }

void PingHandshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingHandshake *>(to)->MergeFrom(
      static_cast<const PingHandshake &>(from));
}


void PingHandshake::MergeFrom(const PingHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.PingHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingHandshake::CopyFrom(const PingHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.PingHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingHandshake::IsInitialized() const {
  return true;
}

void PingHandshake::InternalSwap(PingHandshake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PingHandshake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[7]);
}

// ===================================================================

class DNSHandshake::_Internal {
 public:
};

DNSHandshake::DNSHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.DNSHandshake)
}
DNSHandshake::DNSHandshake(const DNSHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.DNSHandshake)
}

void DNSHandshake::SharedCtor() {
}

DNSHandshake::~DNSHandshake() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.DNSHandshake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DNSHandshake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DNSHandshake::ArenaDtor(void* object) {
  DNSHandshake* _this = reinterpret_cast< DNSHandshake* >(object);
  (void)_this;
}
void DNSHandshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DNSHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.DNSHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSHandshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .xcoin.interchange.DNSEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSHandshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.DNSHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xcoin.interchange.DNSEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.DNSHandshake)
  return target;
}

size_t DNSHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.DNSHandshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xcoin.interchange.DNSEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DNSHandshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DNSHandshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DNSHandshake::GetClassData() const { return &_class_data_; }

void DNSHandshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DNSHandshake *>(to)->MergeFrom(
      static_cast<const DNSHandshake &>(from));
}


void DNSHandshake::MergeFrom(const DNSHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.DNSHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DNSHandshake::CopyFrom(const DNSHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.DNSHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSHandshake::IsInitialized() const {
  return true;
}

void DNSHandshake::InternalSwap(DNSHandshake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSHandshake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[8]);
}

// ===================================================================

class PingPong::_Internal {
 public:
};

PingPong::PingPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.PingPong)
}
PingPong::PingPong(const PingPong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lasthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lasthash().empty()) {
    lasthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lasthash(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.PingPong)
}

void PingPong::SharedCtor() {
lasthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = 0u;
}

PingPong::~PingPong() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.PingPong)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingPong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lasthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingPong::ArenaDtor(void* object) {
  PingPong* _this = reinterpret_cast< PingPong* >(object);
  (void)_this;
}
void PingPong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingPong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingPong::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.PingPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lasthash_.ClearToEmpty();
  height_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingPong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lastHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lasthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PingPong.lastHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingPong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.PingPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // string lastHash = 2;
  if (!this->_internal_lasthash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lasthash().data(), static_cast<int>(this->_internal_lasthash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PingPong.lastHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lasthash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.PingPong)
  return target;
}

size_t PingPong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.PingPong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lastHash = 2;
  if (!this->_internal_lasthash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lasthash());
  }

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingPong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingPong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingPong::GetClassData() const { return &_class_data_; }

void PingPong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingPong *>(to)->MergeFrom(
      static_cast<const PingPong &>(from));
}


void PingPong::MergeFrom(const PingPong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.PingPong)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lasthash().empty()) {
    _internal_set_lasthash(from._internal_lasthash());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingPong::CopyFrom(const PingPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.PingPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPong::IsInitialized() const {
  return true;
}

void PingPong::InternalSwap(PingPong* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lasthash_, lhs_arena,
      &other->lasthash_, rhs_arena
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingPong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[9]);
}

// ===================================================================

class GetBlockchainFromHeightRequest::_Internal {
 public:
};

GetBlockchainFromHeightRequest::GetBlockchainFromHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.GetBlockchainFromHeightRequest)
}
GetBlockchainFromHeightRequest::GetBlockchainFromHeightRequest(const GetBlockchainFromHeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stophash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stophash().empty()) {
    stophash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stophash(), 
      GetArenaForAllocation());
  }
  startheight_ = from.startheight_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.GetBlockchainFromHeightRequest)
}

void GetBlockchainFromHeightRequest::SharedCtor() {
stophash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
startheight_ = 0u;
}

GetBlockchainFromHeightRequest::~GetBlockchainFromHeightRequest() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.GetBlockchainFromHeightRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBlockchainFromHeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stophash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockchainFromHeightRequest::ArenaDtor(void* object) {
  GetBlockchainFromHeightRequest* _this = reinterpret_cast< GetBlockchainFromHeightRequest* >(object);
  (void)_this;
}
void GetBlockchainFromHeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlockchainFromHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlockchainFromHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.GetBlockchainFromHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stophash_.ClearToEmpty();
  startheight_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockchainFromHeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 startheight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stopHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stophash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.GetBlockchainFromHeightRequest.stopHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockchainFromHeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.GetBlockchainFromHeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 startheight = 1;
  if (this->_internal_startheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startheight(), target);
  }

  // string stopHash = 2;
  if (!this->_internal_stophash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stophash().data(), static_cast<int>(this->_internal_stophash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.GetBlockchainFromHeightRequest.stopHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stophash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.GetBlockchainFromHeightRequest)
  return target;
}

size_t GetBlockchainFromHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.GetBlockchainFromHeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stopHash = 2;
  if (!this->_internal_stophash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stophash());
  }

  // uint32 startheight = 1;
  if (this->_internal_startheight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockchainFromHeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBlockchainFromHeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockchainFromHeightRequest::GetClassData() const { return &_class_data_; }

void GetBlockchainFromHeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBlockchainFromHeightRequest *>(to)->MergeFrom(
      static_cast<const GetBlockchainFromHeightRequest &>(from));
}


void GetBlockchainFromHeightRequest::MergeFrom(const GetBlockchainFromHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.GetBlockchainFromHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stophash().empty()) {
    _internal_set_stophash(from._internal_stophash());
  }
  if (from._internal_startheight() != 0) {
    _internal_set_startheight(from._internal_startheight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockchainFromHeightRequest::CopyFrom(const GetBlockchainFromHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.GetBlockchainFromHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockchainFromHeightRequest::IsInitialized() const {
  return true;
}

void GetBlockchainFromHeightRequest::InternalSwap(GetBlockchainFromHeightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stophash_, lhs_arena,
      &other->stophash_, rhs_arena
  );
  swap(startheight_, other->startheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockchainFromHeightRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[10]);
}

// ===================================================================

class PeerUpdateHandshake::_Internal {
 public:
};

PeerUpdateHandshake::PeerUpdateHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.PeerUpdateHandshake)
}
PeerUpdateHandshake::PeerUpdateHandshake(const PeerUpdateHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer().empty()) {
    peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer(), 
      GetArenaForAllocation());
  }
  publicaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publicaddress().empty()) {
    publicaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publicaddress(), 
      GetArenaForAllocation());
  }
  updatetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updatetype().empty()) {
    updatetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updatetype(), 
      GetArenaForAllocation());
  }
  localpeershash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_localpeershash().empty()) {
    localpeershash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localpeershash(), 
      GetArenaForAllocation());
  }
  online_ = from.online_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.PeerUpdateHandshake)
}

void PeerUpdateHandshake::SharedCtor() {
peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publicaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updatetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localpeershash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
online_ = false;
}

PeerUpdateHandshake::~PeerUpdateHandshake() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.PeerUpdateHandshake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PeerUpdateHandshake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  peer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localpeershash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerUpdateHandshake::ArenaDtor(void* object) {
  PeerUpdateHandshake* _this = reinterpret_cast< PeerUpdateHandshake* >(object);
  (void)_this;
}
void PeerUpdateHandshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeerUpdateHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeerUpdateHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.PeerUpdateHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_.ClearToEmpty();
  publicaddress_.ClearToEmpty();
  updatetype_.ClearToEmpty();
  localpeershash_.ClearToEmpty();
  online_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeerUpdateHandshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_peer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PeerUpdateHandshake.peer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string publicAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publicaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PeerUpdateHandshake.publicAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string updateType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_updatetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PeerUpdateHandshake.updateType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string localPeersHash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_localpeershash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.PeerUpdateHandshake.localPeersHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerUpdateHandshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.PeerUpdateHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer = 1;
  if (!this->_internal_peer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer().data(), static_cast<int>(this->_internal_peer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PeerUpdateHandshake.peer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peer(), target);
  }

  // string publicAddress = 2;
  if (!this->_internal_publicaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicaddress().data(), static_cast<int>(this->_internal_publicaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PeerUpdateHandshake.publicAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publicaddress(), target);
  }

  // bool online = 3;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  // string updateType = 4;
  if (!this->_internal_updatetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatetype().data(), static_cast<int>(this->_internal_updatetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PeerUpdateHandshake.updateType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_updatetype(), target);
  }

  // string localPeersHash = 5;
  if (!this->_internal_localpeershash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localpeershash().data(), static_cast<int>(this->_internal_localpeershash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.PeerUpdateHandshake.localPeersHash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_localpeershash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.PeerUpdateHandshake)
  return target;
}

size_t PeerUpdateHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.PeerUpdateHandshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer = 1;
  if (!this->_internal_peer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer());
  }

  // string publicAddress = 2;
  if (!this->_internal_publicaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicaddress());
  }

  // string updateType = 4;
  if (!this->_internal_updatetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatetype());
  }

  // string localPeersHash = 5;
  if (!this->_internal_localpeershash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localpeershash());
  }

  // bool online = 3;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeerUpdateHandshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PeerUpdateHandshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeerUpdateHandshake::GetClassData() const { return &_class_data_; }

void PeerUpdateHandshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PeerUpdateHandshake *>(to)->MergeFrom(
      static_cast<const PeerUpdateHandshake &>(from));
}


void PeerUpdateHandshake::MergeFrom(const PeerUpdateHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.PeerUpdateHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_peer().empty()) {
    _internal_set_peer(from._internal_peer());
  }
  if (!from._internal_publicaddress().empty()) {
    _internal_set_publicaddress(from._internal_publicaddress());
  }
  if (!from._internal_updatetype().empty()) {
    _internal_set_updatetype(from._internal_updatetype());
  }
  if (!from._internal_localpeershash().empty()) {
    _internal_set_localpeershash(from._internal_localpeershash());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeerUpdateHandshake::CopyFrom(const PeerUpdateHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.PeerUpdateHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerUpdateHandshake::IsInitialized() const {
  return true;
}

void PeerUpdateHandshake::InternalSwap(PeerUpdateHandshake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_, lhs_arena,
      &other->peer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &publicaddress_, lhs_arena,
      &other->publicaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updatetype_, lhs_arena,
      &other->updatetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localpeershash_, lhs_arena,
      &other->localpeershash_, rhs_arena
  );
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerUpdateHandshake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[11]);
}

// ===================================================================

class NewBlockHandshake::_Internal {
 public:
  static const ::xcoin::interchange::Block& block(const NewBlockHandshake* msg);
};

const ::xcoin::interchange::Block&
NewBlockHandshake::_Internal::block(const NewBlockHandshake* msg) {
  return *msg->block_;
}
NewBlockHandshake::NewBlockHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.NewBlockHandshake)
}
NewBlockHandshake::NewBlockHandshake(const NewBlockHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::xcoin::interchange::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.NewBlockHandshake)
}

void NewBlockHandshake::SharedCtor() {
block_ = nullptr;
}

NewBlockHandshake::~NewBlockHandshake() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.NewBlockHandshake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewBlockHandshake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void NewBlockHandshake::ArenaDtor(void* object) {
  NewBlockHandshake* _this = reinterpret_cast< NewBlockHandshake* >(object);
  (void)_this;
}
void NewBlockHandshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBlockHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewBlockHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.NewBlockHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBlockHandshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .xcoin.interchange.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBlockHandshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.NewBlockHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xcoin.interchange.Block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.NewBlockHandshake)
  return target;
}

size_t NewBlockHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.NewBlockHandshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xcoin.interchange.Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewBlockHandshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewBlockHandshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewBlockHandshake::GetClassData() const { return &_class_data_; }

void NewBlockHandshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewBlockHandshake *>(to)->MergeFrom(
      static_cast<const NewBlockHandshake &>(from));
}


void NewBlockHandshake::MergeFrom(const NewBlockHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.NewBlockHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::xcoin::interchange::Block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewBlockHandshake::CopyFrom(const NewBlockHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.NewBlockHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBlockHandshake::IsInitialized() const {
  return true;
}

void NewBlockHandshake::InternalSwap(NewBlockHandshake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBlockHandshake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[12]);
}

// ===================================================================

class TxInSignature::_Internal {
 public:
};

TxInSignature::TxInSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.TxInSignature)
}
TxInSignature::TxInSignature(const TxInSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&s2_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(s2_));
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.TxInSignature)
}

void TxInSignature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&s2_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(s2_));
}

TxInSignature::~TxInSignature() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.TxInSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxInSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxInSignature::ArenaDtor(void* object) {
  TxInSignature* _this = reinterpret_cast< TxInSignature* >(object);
  (void)_this;
}
void TxInSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxInSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxInSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.TxInSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s2_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(s2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxInSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxInSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.TxInSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 s1 = 1;
  if (this->_internal_s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_s1(), target);
  }

  // uint32 s2 = 2;
  if (this->_internal_s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.TxInSignature)
  return target;
}

size_t TxInSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.TxInSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 s1 = 1;
  if (this->_internal_s1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_s1());
  }

  // uint32 s2 = 2;
  if (this->_internal_s2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_s2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxInSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxInSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxInSignature::GetClassData() const { return &_class_data_; }

void TxInSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxInSignature *>(to)->MergeFrom(
      static_cast<const TxInSignature &>(from));
}


void TxInSignature::MergeFrom(const TxInSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.TxInSignature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from._internal_s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxInSignature::CopyFrom(const TxInSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.TxInSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInSignature::IsInitialized() const {
  return true;
}

void TxInSignature::InternalSwap(TxInSignature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxInSignature, s2_)
      + sizeof(TxInSignature::s2_)
      - PROTOBUF_FIELD_OFFSET(TxInSignature, s1_)>(
          reinterpret_cast<char*>(&s1_),
          reinterpret_cast<char*>(&other->s1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxInSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[13]);
}

// ===================================================================

class TxIn::_Internal {
 public:
  static const ::xcoin::interchange::TxInSignature& signature(const TxIn* msg);
};

const ::xcoin::interchange::TxInSignature&
TxIn::_Internal::signature(const TxIn* msg) {
  return *msg->signature_;
}
TxIn::TxIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.TxIn)
}
TxIn::TxIn(const TxIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txoutid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txoutid().empty()) {
    txoutid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txoutid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::xcoin::interchange::TxInSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  txoutindex_ = from.txoutindex_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.TxIn)
}

void TxIn::SharedCtor() {
txoutid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&txoutindex_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(txoutindex_));
}

TxIn::~TxIn() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.TxIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  txoutid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void TxIn::ArenaDtor(void* object) {
  TxIn* _this = reinterpret_cast< TxIn* >(object);
  (void)_this;
}
void TxIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxIn::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.TxIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txoutid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  txoutindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string txOutId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txoutid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.TxIn.txOutId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 txOutIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          txoutindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .xcoin.interchange.TxInSignature signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.TxIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txOutId = 1;
  if (!this->_internal_txoutid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txoutid().data(), static_cast<int>(this->_internal_txoutid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.TxIn.txOutId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_txoutid(), target);
  }

  // uint32 txOutIndex = 2;
  if (this->_internal_txoutindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_txoutindex(), target);
  }

  // .xcoin.interchange.TxInSignature signature = 3;
  if (this->_internal_has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.TxIn)
  return target;
}

size_t TxIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.TxIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txOutId = 1;
  if (!this->_internal_txoutid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txoutid());
  }

  // .xcoin.interchange.TxInSignature signature = 3;
  if (this->_internal_has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // uint32 txOutIndex = 2;
  if (this->_internal_txoutindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_txoutindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxIn::GetClassData() const { return &_class_data_; }

void TxIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxIn *>(to)->MergeFrom(
      static_cast<const TxIn &>(from));
}


void TxIn::MergeFrom(const TxIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.TxIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txoutid().empty()) {
    _internal_set_txoutid(from._internal_txoutid());
  }
  if (from._internal_has_signature()) {
    _internal_mutable_signature()->::xcoin::interchange::TxInSignature::MergeFrom(from._internal_signature());
  }
  if (from._internal_txoutindex() != 0) {
    _internal_set_txoutindex(from._internal_txoutindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxIn::CopyFrom(const TxIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.TxIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxIn::IsInitialized() const {
  return true;
}

void TxIn::InternalSwap(TxIn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txoutid_, lhs_arena,
      &other->txoutid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxIn, txoutindex_)
      + sizeof(TxIn::txoutindex_)
      - PROTOBUF_FIELD_OFFSET(TxIn, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[14]);
}

// ===================================================================

class TxOut::_Internal {
 public:
};

TxOut::TxOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.TxOut)
}
TxOut::TxOut(const TxOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.TxOut)
}

void TxOut::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_ = 0u;
}

TxOut::~TxOut() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.TxOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxOut::ArenaDtor(void* object) {
  TxOut* _this = reinterpret_cast< TxOut* >(object);
  (void)_this;
}
void TxOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxOut::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.TxOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.TxOut.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.TxOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.TxOut.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.TxOut)
  return target;
}

size_t TxOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.TxOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxOut::GetClassData() const { return &_class_data_; }

void TxOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxOut *>(to)->MergeFrom(
      static_cast<const TxOut &>(from));
}


void TxOut::MergeFrom(const TxOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.TxOut)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxOut::CopyFrom(const TxOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.TxOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOut::IsInitialized() const {
  return true;
}

void TxOut::InternalSwap(TxOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[15]);
}

// ===================================================================

class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txins_(arena),
  txouts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:xcoin.interchange.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txins_(from.txins_),
      txouts_(from.txouts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:xcoin.interchange.Transaction)
}

void Transaction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:xcoin.interchange.Transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:xcoin.interchange.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txins_.Clear();
  txouts_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xcoin.interchange.Transaction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .xcoin.interchange.TxIn txIns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .xcoin.interchange.TxOut txOuts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txouts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xcoin.interchange.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xcoin.interchange.Transaction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .xcoin.interchange.TxIn txIns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_txins(i), target, stream);
  }

  // repeated .xcoin.interchange.TxOut txOuts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txouts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_txouts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xcoin.interchange.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xcoin.interchange.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xcoin.interchange.TxIn txIns = 2;
  total_size += 1UL * this->_internal_txins_size();
  for (const auto& msg : this->txins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xcoin.interchange.TxOut txOuts = 3;
  total_size += 1UL * this->_internal_txouts_size();
  for (const auto& msg : this->txouts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xcoin.interchange.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txins_.MergeFrom(from.txins_);
  txouts_.MergeFrom(from.txouts_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xcoin.interchange.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txins_.InternalSwap(&other->txins_);
  txouts_.InternalSwap(&other->txouts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace interchange
}  // namespace xcoin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xcoin::interchange::Block* Arena::CreateMaybeMessage< ::xcoin::interchange::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::Blockchain* Arena::CreateMaybeMessage< ::xcoin::interchange::Blockchain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::Blockchain >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::GetHeaders* Arena::CreateMaybeMessage< ::xcoin::interchange::GetHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::GetHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::Header* Arena::CreateMaybeMessage< ::xcoin::interchange::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::Headers* Arena::CreateMaybeMessage< ::xcoin::interchange::Headers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::Headers >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::XNodeMessage* Arena::CreateMaybeMessage< ::xcoin::interchange::XNodeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::XNodeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::DNSEntry* Arena::CreateMaybeMessage< ::xcoin::interchange::DNSEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::DNSEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::PingHandshake* Arena::CreateMaybeMessage< ::xcoin::interchange::PingHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::PingHandshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::DNSHandshake* Arena::CreateMaybeMessage< ::xcoin::interchange::DNSHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::DNSHandshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::PingPong* Arena::CreateMaybeMessage< ::xcoin::interchange::PingPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::PingPong >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::GetBlockchainFromHeightRequest* Arena::CreateMaybeMessage< ::xcoin::interchange::GetBlockchainFromHeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::GetBlockchainFromHeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::PeerUpdateHandshake* Arena::CreateMaybeMessage< ::xcoin::interchange::PeerUpdateHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::PeerUpdateHandshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::NewBlockHandshake* Arena::CreateMaybeMessage< ::xcoin::interchange::NewBlockHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::NewBlockHandshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::TxInSignature* Arena::CreateMaybeMessage< ::xcoin::interchange::TxInSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::TxInSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::TxIn* Arena::CreateMaybeMessage< ::xcoin::interchange::TxIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::TxIn >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::TxOut* Arena::CreateMaybeMessage< ::xcoin::interchange::TxOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::TxOut >(arena);
}
template<> PROTOBUF_NOINLINE ::xcoin::interchange::Transaction* Arena::CreateMaybeMessage< ::xcoin::interchange::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xcoin::interchange::Transaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
